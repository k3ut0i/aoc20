* Implementation Notes for AOC2020

** DONE Day 1
   CLOSED: [2020-12-04 Fri 15:53]

*** Part 1
 I struggled to create a 2d matrix of pairs, but realized that I do not actually need both the elements. I just need their product.
 #+begin_src gnu-apl
   a←1721 979 366 299 675 1456
   a1←a∘.+a ⍝a1 has sums
   a2←a∘.×a ⍝a2 has product
   (2020=∊a1)/∊a2
 #+end_src

 I also took a lot of time to figure out I/O ~⎕FIO~ and string->number conversion with ~⍎~ and even more to combine them. Here is the whole process
 #+begin_src gnu-apl
   a←⍎⎕FIO[49]'inputs/day1'
   a1←a∘.+a
   a2←a∘.×a
   (2020=∊a1)/∊a2
 #+end_src
*** DONE Part 2
    CLOSED: [2020-12-04 Fri 15:53]
 The simple combinatorial explosion below, that worked till now is not working for the input
 #+begin_src gnu-apl
   a←1721 979 366 299 675 1456
   as←a∘.+a∘.+a
   am←a∘.×a∘.×a
   (2020=∊as)/(∊am)
 #+end_src
 /GNU APL/ is complaining about a ~WS FULL+~ error. So now I need to get smart. Sorting and constraints?
Finally realized out that a nested vector is different from a martix.

~]help~ is very useful to see what each command does.
Finally found out the map function ~¨~ mapped to ~.1~. The following is a more optimized version of the above process.
#+begin_src gnu-apl
  ∇λ←⍺ isE ⍵
    λ←∧⌿(⍺=⍵) ⍝ ≡ ?
  ∇
  n2←({~(⍵ isE 0 0)} ¨ n1)/1n
  {2020-((+⌿)¨⍵)}n2 ⍝ This has the amount missing for each pair.
  ⍝ If I can find that in n, then we have a triple that sums to 2020
#+end_src
Rewrote the whole thing in Julia
#+begin_src julia
  search_pair(readnums("inputs/day1"))
  search_triple(readnums("inputs/day1"))
#+end_src

** DONE Day 2
   CLOSED: [2020-12-02 Wed 22:20]
Also done in Julia.
*** DONE Part1
    CLOSED: [2020-12-02 Wed 22:07]
Parsing the input file is very weird. ~FIO[48]~ fscanf is working, but ~FIO[55]~ ~sscanf~ is not working as expected. I am going to parse this using sublists.
- Find the indices of the delimiters.
- Find the sub-strings between I1 and I2 using ~I1↓⍳I2~.
- Clean up the numbers

Finally found while ~⍣~ loops, user-defined functions, and working with files.
#+begin_src gnu-apl
  )LOAD day2.apl
  a← {Valid ParseLine ⍵} ⎕FIO[49]'inputs/day2'
  +/a ⍝ count all valid inputs
#+end_src
*** DONE Part2
    CLOSED: [2020-12-02 Wed 22:20]
Just replace ~Valid~ with ~Valid1~ in previous solution and we get the answer.
** Day 3
Finally figured out how ~⊃~ ~Disclose~ to work with nested vectors.
#+begin_src gnu-apl
  ⍝ Part 1
  'inputs/day3' findTrees 1 3 ⍝ I some how confused the x-y-order
  ⍝ Part 2
  part2 'inputs/day3'
#+end_src
** Day 4
In Julia
#+begin_src julia
  reduce(+, map(is_valid, parseinputs("inputs/day4"))), # part 1
  reduce(+, map(is_valid2, map(get_data, parseinputs("inputs/day4")))) # part 2
#+end_src
** Day 7
I always stumble on graph algorithms. This is a conceptually simple depth first reduction algorithm. Parsing the input took less that 15min even with my unfamiliar regex and dict handling. What is required is literally the transitive closure of this directed acyclic graph. 
*** Part 1
 For the first part I set the *shiny gold* bag as and end point and rewrote the rules a few times. So since the depth is small enough after a few iterations all the bags that have *shiny gold* in them will have the entry in the rules. I counted them later.
 #+begin_src julia
   rs = get_rules("inputs/day7.jl")
   rs["shiny_gold"] = nothing
   count_rules_with(rs, "shiny_gold")
 #+end_src
*** TODO Part 2
 I am not find a clear way to represent the recursive enclosure of the bags. Recursive ~Dict~'s look bad.

I am trying a ASP solution to this problem. First part works perfectly and the examples are working for the second part but my answer is wrong for the actual problem. I don't understand why? First generate the input as prolog rules after loading [[src/day7.jl]] as follows :
#+begin_src
  write_rules_prolog("inputs/day7", "day7facts.prolog") # rewrite input as facts 
#+end_src

Aggregates are computing from a set. So multiple elements are counted once and this gave me the wrong answer. If I generate tuples and then do aggregation then we have a correct answer
#+begin_src sh :exports both :session *day7* :results output verbatim
  clingo -V0 day7facts.prolog src/day7.lp 
#+end_src

#+RESULTS:
: bagsInShiny(20189) shinyInBags(128)
: SATISFIABLE

The *almost* same prolog code gives me the correct solution
#+begin_src prolog :exports both
  :- consult("src/day7sol.prolog").
  :- consult("day7facts.prolog").
  :- all_bags_in(shiny_gold, N), print(N), nl.
#+end_src

#+RESULTS:
: 20189

** Day 8
The first part is a simple simulation. I took too long for the second part on some misunderstood assumptions. Since the program itself does not change, we can simply take the execution path of the solution to part1 and try flipping the ~nop~ and ~jmp~ instructions and see if one such flip executes the program to the end.

** Day9
   #+begin_src ess-julia :exports both
     include(expanduser("~/projects/aoc20/src/day9.jl"))
     checknums(getnums("inputs/day9"), 25) # part1 
     find_cont_sum(22477624, getnums("inputs/day9")) # part 2
   #+end_src

   #+RESULTS:
   : 2980044

** Day10
For the second part instead of just counting paths using dynamic programming, I tried to construct the paths and got my poor system stuck. The rest is straight forward.
#+begin_src ess-julia
  oneTimesThrees(difflist(readnums("inputs/day10"))) # part 1
  ns = getadapts("inputs/day10")
  possible_paths(length(ns), ns, Dict([])) # part 2
#+end_src

** Day 11
I took too long to get the neighbors for the second part of the problem.
#+begin_src ess-julia
  f = readfloor("inputs/day11")
  step_until_no_changes(f, noOcc, 4)
  step_until_no_changes(f, noOcc2, 5)
#+end_src

** Day 12
Simple travel simulation
#+begin_src ess-julia
  dirs = parsefile("inputs/day12")
  travel(dirs), travel2(dirs)
#+end_src

** Day 13

** Day 14
First day doing something non-trivial. For the set of all possible bitmasks, I wrote a powerset function in listutil module.

#+begin_src ess-julia
  run_program("inputs/day14", step_program),
  run_program("inputs/day14", step_program2)
#+end_src

** Day 15
Got a bit stuck when boundary conditions of stepping met initialization. I had to stop initializing the last element and give the last element as previous num.

** Day 16
Wasted quite a bit of time trying out why constraint solving is not working when the bug was actually in initial parsing regex. Lesson learned here is to make the regex as restrictive as possible and start loosening it when it fails.

I also wrote a good search in imperative(functional) style. Using ~sortperm~ to make the constraint solving more efficient is a good bonus.

** Day 17
Finally came across my pet peeve and a good use case for a macro. I am going to attempt my first macro with ~getneighbors~ which should be a simple expression interms of its inputs. This is not going to make my program much efficient as this part is not a bottleneck, but it is an expression which can be computed at compile time. So I think it is a good case for a macro.

Well the macro did not workout. The rest of the simulation went as expected. Since the stepping part has not changed rules b/w part one and two, the second part also done quite fast. I just passed a function that gets neighbors and my modular implementation took care of everything.
#+begin_src ess-julia
  init = readinputs("inputs/day17")
  part1ans = step_ntimes_active_count(init, 6)
  init = readinputs("inputs/day17", dims=4)
  part2ans = step_ntimes_active_count(init, 6, getn2)
#+end_src
